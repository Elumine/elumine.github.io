var app, components;

app = angular.module('app', ['ui.router']);

components = {};

app.run(["analyticsService", function(analyticsService) {
  return analyticsService.init();
}]);

var MAKE_COMPONENT, MAKE_DIRECTIVE, MAKE_SERVICE, extend, include;

extend = function(object, mixin) {
  var method, name, results;
  results = [];
  for (name in mixin) {
    method = mixin[name];
    results.push(object[name] = method);
  }
  return results;
};

include = function(parent, mixin) {
  return extend(parent.prototype, mixin);
};

angular.component = function(componentClass) {
  return angular.module(componentClass.module).directive(componentClass.id, MAKE_COMPONENT(componentClass));
};

angular.service = function(serviceClass) {
  return angular.module(serviceClass.module).service(serviceClass.id, MAKE_SERVICE(serviceClass));
};

angular.directive = function(directiveClass) {
  return angular.module(directiveClass.module).directive(directiveClass.id, MAKE_DIRECTIVE(directiveClass));
};

MAKE_COMPONENT = function(componentClass) {
  var directiveFn, injectables, j, len, ref, v;
  injectables = ['$templateCache'];
  if (componentClass.services) {
    ref = componentClass.services;
    for (j = 0, len = ref.length; j < len; j++) {
      v = ref[j];
      injectables.push(v);
    }
  }
  directiveFn = function($templateCache) {
    var i, k, len1, ref1, services;
    services = {};
    if (componentClass.services) {
      ref1 = componentClass.services;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        v = ref1[i];
        services[v] = arguments[i + 1];
      }
    }
    return {
      restrict: 'E',
      replace: true,
      scope: componentClass.scope,
      template: $templateCache.get(componentClass.template),
      link: function(scope, element, attributes) {
        return extend(scope, new componentClass({
          scope: scope,
          element: element,
          attributes: attributes,
          services: services
        }));
      }
    };
  };
  directiveFn.prototype.constructor.$inject = injectables;
  return directiveFn;
};

MAKE_DIRECTIVE = function(directiveClass) {
  var directiveFn, injectables, j, len, ref, v;
  injectables = [];
  if (directiveClass.services) {
    ref = directiveClass.services;
    for (j = 0, len = ref.length; j < len; j++) {
      v = ref[j];
      injectables.push(v);
    }
  }
  directiveFn = function() {
    var i, k, len1, ref1, services;
    services = {};
    if (directiveClass.services) {
      ref1 = directiveClass.services;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        v = ref1[i];
        services[v] = arguments[i];
      }
    }
    return {
      restrict: 'A',
      scope: directiveClass.scope,
      link: function(scope, element, attributes) {
        return new directiveClass({
          scope: scope,
          element: element,
          attributes: attributes,
          services: services
        });
      }
    };
  };
  directiveFn.prototype.constructor.$inject = injectables;
  return directiveFn;
};

MAKE_SERVICE = function(serviceClass) {
  var injectables, j, len, ref, serviceFn, v;
  injectables = [];
  if (serviceClass.services) {
    ref = serviceClass.services;
    for (j = 0, len = ref.length; j < len; j++) {
      v = ref[j];
      injectables.push(v);
    }
  }
  serviceFn = function() {
    var i, k, len1, ref1, services;
    services = {};
    if (serviceClass.services) {
      ref1 = serviceClass.services;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        v = ref1[i];
        services[v] = arguments[i];
      }
    }
    return new serviceClass({
      services: services
    });
  };
  serviceFn.prototype.constructor.$inject = injectables;
  return serviceFn;
};

var routeConfig;

routeConfig = function($stateProvider, $urlRouterProvider) {
  $urlRouterProvider.when('/feed/article/:key/', '/feed/article/:key').otherwise('/feed');
  return $stateProvider.state('main', {
    template: '<main></main>'
  }).state('main.analytics', {
    url: '/analytics',
    template: '<analytics></analytics>'
  }).state('main.feed', {
    url: '/feed',
    template: '<feed></feed>'
  }).state('main.feed.article_viewer', {
    url: '/article/:key',
    template: '<article-viewer></article-viewer>',
    params: {
      key: null
    }
  }).state('registerAnalytics', {
    url: '/registerAnalytics?event',
    template: '<register-analytics></register-analytics>'
  });
};

angular.module('app').config(routeConfig);

var RegisterAnalytics;

angular.component(RegisterAnalytics = (function() {
  RegisterAnalytics.id = 'registerAnalytics';

  RegisterAnalytics.module = 'app';

  RegisterAnalytics.template = '<div>Register Analytics</div>';

  RegisterAnalytics.scope = true;

  RegisterAnalytics.services = ['$state'];

  function RegisterAnalytics(options) {
    var e;
    this.services = options.services, this.scope = options.scope;
    e = null;
    console.info('RegisterAnalytics()');
    setTimeout((function(_this) {
      return function() {
        var err, error;
        try {
          e = JSON.parse(_this.services.$state.params.event);
        } catch (error) {
          err = error;
          console.warn('\t error while parsing event data', err);
        }
        console.log('\t event: ', e, 'user', firebase.auth().currentUser);
        return firebase.database().ref('registerAnalytics/' + firebase.auth().currentUser.uid).set({
          date: new Date().toString(),
          event: e
        });
      };
    })(this), 1000);
  }

  return RegisterAnalytics;

})());

var BindCompiled;

angular.directive(BindCompiled = (function() {
  BindCompiled.id = 'bindCompiled';

  BindCompiled.module = 'app';

  BindCompiled.services = ['$timeout', '$compile'];

  BindCompiled.scope = {
    bindCompiled: '='
  };

  function BindCompiled(options) {
    var compileClone;
    compileClone = function() {
      return options.services.$compile('<span>' + options.scope.bindCompiled + '</span>')(options.scope, function(cloned, scope) {
        console.log(cloned);
        return options.element.append(cloned);
      });
    };
    options.services.$timeout(compileClone, 0);
  }

  return BindCompiled;

})());

var Article;

Article = (function() {
  function Article(data) {
    var feature, i, j, len, len1, link, ref, ref1;
    this.key = data.key, this.name = data.name, this.poster = data.poster, this.description = data.description, this.text = data.text, this.video = data.video, this.date = data.date, this.content = data.content;
    this.features = [];
    if (data.features) {
      ref = data.features;
      for (i = 0, len = ref.length; i < len; i++) {
        feature = ref[i];
        this.features.push(new Feature(feature));
      }
    }
    this.links = [];
    if (data.links) {
      ref1 = data.links;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        link = ref1[j];
        this.links.push(new Link(link));
      }
    }
    if (this.poster) {
      this.poster = 'build/assets/articles/' + this.key + '/poster.png';
    }
    this.setImages(data.images);
  }

  Article.prototype.describe = function(description) {
    this.description = description;
    return this;
  };

  Article.prototype.setText = function(text) {
    this.text = text;
    return this;
  };

  Article.prototype.setVideo = function(video) {
    this.video = video;
    return this;
  };

  Article.prototype.setImages = function(images) {
    var i, image, ref;
    this.images = [];
    for (image = i = 0, ref = images - 1; 0 <= ref ? i <= ref : i >= ref; image = 0 <= ref ? ++i : --i) {
      this.images.push('build/assets/articles/' + this.key + '/image' + image + '.png');
    }
    return this;
  };

  Article.prototype.addFeature = function(f) {
    this.features.push(new Feature(f));
    return this;
  };

  Article.prototype.addLink = function(l) {
    this.links.push(new Link(l));
    return this;
  };

  Article.prototype.addFeatures = function(features) {
    var f, i, len;
    for (i = 0, len = features.length; i < len; i++) {
      f = features[i];
      this.addFeature(f);
    }
    return this;
  };

  Article.prototype.addLinks = function(links) {
    var i, l, len;
    for (i = 0, len = links.length; i < len; i++) {
      l = links[i];
      this.addLink(l);
    }
    return this;
  };

  Article.prototype.hasPoster = function() {
    return this.poster;
  };

  Article.prototype.hasImages = function() {
    return this.images.length > 0;
  };

  Article.prototype.hasFeatures = function() {
    return this.features.length > 0;
  };

  Article.prototype.hasLinks = function() {
    return this.links.length > 0;
  };

  Article.prototype.hasVideo = function() {
    return this.video;
  };

  Article.prototype.hasContent = function() {
    return this.content;
  };

  return Article;

})();

var Feature;

Feature = (function() {
  function Feature(key) {
    this.key = key;
    this.imageUrl = 'build/assets/ui/features/' + this.key + '.png';
  }

  return Feature;

})();

var Link;

Link = (function() {
  function Link(data) {
    this.type = data.type, this.url = data.url;
    this.imageUrl = 'build/assets/ui/links/' + this.type + '.png';
  }

  return Link;

})();

var AnalyticsService;

angular.service(AnalyticsService = (function() {
  AnalyticsService.id = 'analyticsService';

  AnalyticsService.module = 'app';

  AnalyticsService.services = ['$rootScope'];

  function AnalyticsService(options) {
    console.info('AnalyticsService()');
    this.analytics = {
      anonymous: {}
    };
    this.config = {
      apiKey: "AIzaSyAt3giWV5IWj0FMKWn7oO47ZhcKkgzoTWs",
      authDomain: "iocloud-77b52.firebaseapp.com",
      databaseURL: "https://iocloud-77b52.firebaseio.com",
      storageBucket: "iocloud-77b52.appspot.com",
      messagingSenderId: "267434257483"
    };
    firebase.initializeApp(this.config);
    firebase.auth().onAuthStateChanged((function(_this) {
      return function(user) {
        return _this.user = user;
      };
    })(this));
    firebase.database().ref('anonymous/').once('value').then((function(_this) {
      return function(snapshot) {
        _this.analytics.anonymous = snapshot.val();
        return options.services.$rootScope.$broadcast('AnalyticsService.analytics:dataChanged');
      };
    })(this));
  }

  AnalyticsService.prototype.registerAnonymous = function() {
    console.info('AnalyticsService.registerAnonymous()');
    return firebase.database().ref('anonymous/' + this.user.uid).set({
      date: new Date().toString()
    });
  };

  AnalyticsService.prototype.init = function() {};

  return AnalyticsService;

})());

var ArticlesService;

angular.service(ArticlesService = (function() {
  ArticlesService.id = 'articlesService';

  ArticlesService.module = 'app';

  ArticlesService.services = [];

  function ArticlesService(options) {
    this.articles = [];
    DATA_STORAGE.articles.forEach((function(_this) {
      return function(articleData) {
        return _this.articles.push(new Article(articleData));
      };
    })(this));
  }

  ArticlesService.prototype.getAllArticles = function() {
    return this.articles;
  };

  ArticlesService.prototype.getArticleByKey = function(key) {
    var article;
    console.log('get', key, this.articles);
    article = null;
    this.articles.forEach((function(_this) {
      return function(a) {
        if (a.key === key) {
          return article = a;
        }
      };
    })(this));
    return article;
  };

  return ArticlesService;

})());

var Main;

angular.component(Main = (function() {
  function Main() {}

  Main.id = 'main';

  Main.module = 'app';

  Main.template = 'app/components/main/main.html';

  Main.scope = true;

  return Main;

})());

var AnalyticsComponent;

angular.component(AnalyticsComponent = (function() {
  AnalyticsComponent.id = 'analytics';

  AnalyticsComponent.module = 'app';

  AnalyticsComponent.template = 'app/components/main/analytics/analytics.html';

  AnalyticsComponent.scope = true;

  AnalyticsComponent.services = ['analyticsService', '$rootScope'];

  function AnalyticsComponent(options) {
    ga('send', 'AnalyticsComponent');
    this.services = options.services, this.scope = options.scope;
    this.services.$rootScope.$on('AnalyticsService.analytics:dataChanged', (function(_this) {
      return function(e, data) {
        _this.scope.analytics = _this.services.analyticsService.analytics;
        return _this.scope.$digest();
      };
    })(this));
  }

  return AnalyticsComponent;

})());

var Feed;

angular.component(Feed = (function() {
  Feed.id = 'feed';

  Feed.module = 'app';

  Feed.template = 'app/components/main/feed/feed.html';

  Feed.scope = true;

  Feed.services = ['$state', 'articlesService'];

  function Feed(options) {
    ga('send', 'Feed');
    this.services = options.services;
    this.articles = options.services.articlesService.getAllArticles();
  }

  Feed.prototype.showArticle = function(article) {
    ga('send', 'Feed.showArticle');
    console.log('show', article);
    return this.services.$state.go('main.feed.article_viewer', {
      key: article.key
    });
  };

  return Feed;

})());

var Footer;

angular.component(Footer = (function() {
  Footer.id = 'footer';

  Footer.module = 'app';

  Footer.template = 'app/components/main/footer/footer.html';

  Footer.scope = true;

  Footer.services = ['$state'];

  function Footer(options) {}

  return Footer;

})());

var Header;

angular.component(Header = (function() {
  Header.id = 'header';

  Header.module = 'app';

  Header.template = 'app/components/main/header/header.html';

  Header.scope = true;

  Header.services = ['$state'];

  function Header(options) {
    this.scope = options.scope;
  }

  return Header;

})());



var ArticleViewer;

angular.component(ArticleViewer = (function() {
  ArticleViewer.id = 'articleViewer';

  ArticleViewer.module = 'app';

  ArticleViewer.template = 'app/components/main/feed/article-viewer/article-viewer.html';

  ArticleViewer.scope = true;

  ArticleViewer.services = ['$state', 'articlesService'];

  function ArticleViewer(options) {
    ga('send', 'ArticleViewer');
    this.services = options.services;
    this.article = options.services.articlesService.getArticleByKey(options.services.$state.params.key);
    console.log('ArticleViewer', this.article);
  }

  return ArticleViewer;

})());
