var components;

angular.module('app', ['ui.router']);

components = {};

var MAKE_COMPONENT, MAKE_DIRECTIVE, MAKE_SERVICE, extend, include;

extend = function(object, mixin) {
  var method, name, results;
  results = [];
  for (name in mixin) {
    method = mixin[name];
    results.push(object[name] = method);
  }
  return results;
};

include = function(parent, mixin) {
  return extend(parent.prototype, mixin);
};

angular.component = function(componentClass) {
  return angular.module(componentClass.module).directive(componentClass.id, MAKE_COMPONENT(componentClass));
};

angular.service = function(serviceClass) {
  return angular.module(serviceClass.module).service(serviceClass.id, MAKE_SERVICE(serviceClass));
};

angular.directive = function(directiveClass) {
  return angular.module(directiveClass.module).directive(directiveClass.id, MAKE_DIRECTIVE(directiveClass));
};

MAKE_COMPONENT = function(componentClass) {
  var directiveFn, injectables, j, len, ref, v;
  injectables = ['$templateCache'];
  if (componentClass.services) {
    ref = componentClass.services;
    for (j = 0, len = ref.length; j < len; j++) {
      v = ref[j];
      injectables.push(v);
    }
  }
  directiveFn = function($templateCache) {
    var i, k, len1, ref1, services;
    services = {};
    if (componentClass.services) {
      ref1 = componentClass.services;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        v = ref1[i];
        services[v] = arguments[i + 1];
      }
    }
    return {
      restrict: 'E',
      replace: true,
      scope: componentClass.scope,
      template: $templateCache.get(componentClass.template),
      link: function(scope, element, attributes) {
        return extend(scope, new componentClass({
          scope: scope,
          element: element,
          attributes: attributes,
          services: services
        }));
      }
    };
  };
  directiveFn.prototype.constructor.$inject = injectables;
  return directiveFn;
};

MAKE_DIRECTIVE = function(directiveClass) {
  var directiveFn, injectables, j, len, ref, v;
  injectables = [];
  if (directiveClass.services) {
    ref = directiveClass.services;
    for (j = 0, len = ref.length; j < len; j++) {
      v = ref[j];
      injectables.push(v);
    }
  }
  directiveFn = function() {
    var i, k, len1, ref1, services;
    services = {};
    if (directiveClass.services) {
      ref1 = directiveClass.services;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        v = ref1[i];
        services[v] = arguments[i];
      }
    }
    return {
      restrict: 'A',
      scope: directiveClass.scope,
      link: function(scope, element, attributes) {
        return new directiveClass({
          scope: scope,
          element: element,
          attributes: attributes,
          services: services
        });
      }
    };
  };
  directiveFn.prototype.constructor.$inject = injectables;
  return directiveFn;
};

MAKE_SERVICE = function(serviceClass) {
  var injectables, j, len, ref, serviceFn, v;
  injectables = [];
  if (serviceClass.services) {
    ref = serviceClass.services;
    for (j = 0, len = ref.length; j < len; j++) {
      v = ref[j];
      injectables.push(v);
    }
  }
  serviceFn = function() {
    var i, k, len1, ref1, services;
    services = {};
    if (serviceClass.services) {
      ref1 = serviceClass.services;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        v = ref1[i];
        services[v] = arguments[i];
      }
    }
    return new serviceClass({
      services: services
    });
  };
  serviceFn.prototype.constructor.$inject = injectables;
  return serviceFn;
};

var routeConfig;

routeConfig = function($stateProvider, $urlRouterProvider) {
  $urlRouterProvider.when('/projects', '/projects/').otherwise('/home');
  return $stateProvider.state('main', {
    template: '<main></main>'
  }).state('main.home', {
    url: '/home',
    template: '<home></home>'
  }).state('main.projects', {
    url: '/projects/:key',
    params: {
      key: null
    },
    template: '<projects></projects>'
  }).state('main.project', {
    url: '/project/:key',
    params: {
      key: null
    },
    template: '<project></project>'
  });
};

angular.module('app').config(routeConfig);

var Category;

Category = (function() {
  function Category(data) {
    var k, ref, v;
    this.name = data.name, this.key = data.key;
    this.works = {};
    ref = data.projects;
    for (k in ref) {
      v = ref[k];
      this.works[k] = new Work(v, k, this.key);
    }
  }

  return Category;

})();

var Feature;

Feature = (function() {
  function Feature(key) {
    this.key = key;
    this.imageUrl = 'build/assets/ui/features/' + this.key + '.png';
  }

  return Feature;

})();

var Link;

Link = (function() {
  function Link(data) {
    this.type = data.type, this.url = data.url;
    this.imageUrl = 'build/assets/ui/links/' + this.type + '.png';
  }

  return Link;

})();

var Work;

Work = (function() {
  function Work(data, key, catKey) {
    var feature, i, j, len, len1, link, ref, ref1;
    this.key = key;
    this.catKey = catKey;
    this.name = data.name, this.poster = data.poster, this.description = data.description, this.text = data.text, this.video = data.video, this.date = data.date, this.content = data.content;
    this.features = [];
    if (data.features) {
      ref = data.features;
      for (i = 0, len = ref.length; i < len; i++) {
        feature = ref[i];
        this.features.push(new Feature(feature));
      }
    }
    this.links = [];
    if (data.links) {
      ref1 = data.links;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        link = ref1[j];
        this.links.push(new Link(link));
      }
    }
    if (this.poster) {
      this.poster = 'build/assets/projects/' + this.catKey + '/' + this.key + '/poster.png';
    }
    this.setImages(data.images);
  }

  Work.prototype.describe = function(description) {
    this.description = description;
    return this;
  };

  Work.prototype.setText = function(text) {
    this.text = text;
    return this;
  };

  Work.prototype.setVideo = function(video) {
    this.video = video;
    return this;
  };

  Work.prototype.setImages = function(images) {
    var i, image, ref;
    this.images = [];
    for (image = i = 0, ref = images - 1; 0 <= ref ? i <= ref : i >= ref; image = 0 <= ref ? ++i : --i) {
      this.images.push('build/assets/projects/' + this.catKey + '/' + this.key + '/image' + image + '.png');
    }
    return this;
  };

  Work.prototype.addFeature = function(f) {
    this.features.push(new Feature(f));
    return this;
  };

  Work.prototype.addLink = function(l) {
    this.links.push(new Link(l));
    return this;
  };

  Work.prototype.addFeatures = function(features) {
    var f, i, len;
    for (i = 0, len = features.length; i < len; i++) {
      f = features[i];
      this.addFeature(f);
    }
    return this;
  };

  Work.prototype.addLinks = function(links) {
    var i, l, len;
    for (i = 0, len = links.length; i < len; i++) {
      l = links[i];
      this.addLink(l);
    }
    return this;
  };

  Work.prototype.hasPoster = function() {
    return this.poster;
  };

  Work.prototype.hasImages = function() {
    return this.images.length > 0;
  };

  Work.prototype.hasFeatures = function() {
    return this.features.length > 0;
  };

  Work.prototype.hasLinks = function() {
    return this.links.length > 0;
  };

  Work.prototype.hasVideo = function() {
    return this.video;
  };

  Work.prototype.hasContent = function() {
    return this.content;
  };

  return Work;

})();

var BindCompiled;

angular.directive(BindCompiled = (function() {
  BindCompiled.id = 'bindCompiled';

  BindCompiled.module = 'app';

  BindCompiled.services = ['$timeout', '$compile'];

  BindCompiled.scope = {
    bindCompiled: '='
  };

  function BindCompiled(options) {
    var compileClone;
    compileClone = function() {
      return options.services.$compile('<span>' + options.scope.bindCompiled + '</span>')(options.scope, function(cloned, scope) {
        console.log(cloned);
        return options.element.append(cloned);
      });
    };
    options.services.$timeout(compileClone, 0);
  }

  return BindCompiled;

})());

var WorksService;

angular.service(WorksService = (function() {
  WorksService.id = 'data';

  WorksService.module = 'app';

  WorksService.services = ['$http'];

  function WorksService(options) {
    var cat, i, len, ref;
    this.http = options.services.$http;
    this.categories = [];
    ref = window.PROJECTS_STORAGE.categories;
    for (i = 0, len = ref.length; i < len; i++) {
      cat = ref[i];
      this.categories.push(new Category(cat));
    }
  }

  WorksService.prototype.getProjectByKey = function(key) {
    var cK, cV, project, ref;
    project = null;
    ref = this.categories;
    for (cK in ref) {
      cV = ref[cK];
      if (cV.works[key]) {
        project = cV.works[key];
        break;
      }
    }
    return project;
  };

  WorksService.prototype.getProjectsByCategory = function(searchCategory) {
    var i, len, ref, result, selfCat;
    result = [];
    if (searchCategory) {
      ref = this.categories;
      for (i = 0, len = ref.length; i < len; i++) {
        selfCat = ref[i];
        if (searchCategory === selfCat.key) {
          result.push(selfCat);
        }
      }
    } else {
      result = this.categories;
    }
    return result;
  };

  return WorksService;

})());

var Main;

angular.component(Main = (function() {
  function Main() {}

  Main.id = 'main';

  Main.module = 'app';

  Main.template = 'app/components/main/main.html';

  Main.scope = true;

  return Main;

})());

var Home;

angular.component(Home = (function() {
  function Home() {}

  Home.id = 'home';

  Home.module = 'app';

  Home.template = 'app/components/main/home/home.html';

  Home.scope = true;

  return Home;

})());

var Navigation, NavigationLink;

angular.component(Navigation = (function() {
  Navigation.id = 'navigation';

  Navigation.module = 'app';

  Navigation.template = 'app/components/main/navigation/navigation.html';

  Navigation.scope = true;

  function Navigation() {
    this.links = [new NavigationLink('projects/games', 'games'), new NavigationLink('projects/level-design', 'level-design'), new NavigationLink('projects/art', 'art'), new NavigationLink('projects/programming', 'programming')];
  }

  return Navigation;

})());

NavigationLink = (function() {
  function NavigationLink(url, key) {
    this.url = url;
    this.key = key;
    this.imageUrl = 'build/assets/ui/navigation/' + this.key + '.png';
  }

  return NavigationLink;

})();

var RecentProjects;

angular.component(RecentProjects = (function() {
  RecentProjects.id = 'recentProjects';

  RecentProjects.module = 'app';

  RecentProjects.template = 'app/components/main/recent-projects/recent-projects.html';

  RecentProjects.scope = true;

  RecentProjects.services = ['$state'];

  function RecentProjects(options) {
    this.scope = options.scope;
    this.state = options.services.$state;
    this.setPosterUrl();
    options.scope.$on('$stateChangeSuccess', this.setPosterUrl.bind(this));
  }

  RecentProjects.prototype.setPosterUrl = function() {
    console.log(this.state.current.name);
    switch (this.state.current.name) {
      case 'main.projects':
        return this.scope.currentPosterUrl = this.state.params.key;
      default:
        return this.scope.currentPosterUrl = 'home';
    }
  };

  return RecentProjects;

})());

var TopBar;

angular.component(TopBar = (function() {
  function TopBar() {}

  TopBar.id = 'topBar';

  TopBar.module = 'app';

  TopBar.template = 'app/components/main/top-bar/top-bar.html';

  TopBar.scope = true;

  return TopBar;

})());

var TemplateNews;

angular.component(TemplateNews = (function() {
  function TemplateNews() {}

  TemplateNews.id = 'templateNews';

  TemplateNews.module = 'app';

  TemplateNews.template = 'app/components/content/games/news/template-news.html';

  TemplateNews.scope = true;

  return TemplateNews;

})());

var Projects;

angular.component(Projects = (function() {
  Projects.id = 'projects';

  Projects.module = 'app';

  Projects.template = 'app/components/main/content/projects/projects.html';

  Projects.scope = true;

  Projects.services = ['$state', 'data'];

  function Projects(options) {
    this.worksService = options.services.data;
    this.key = options.services.$state.params.key;
    this.displayables = this.worksService.getProjectsByCategory(this.hasKey() ? this.key : null);
  }

  Projects.prototype.hasKey = function() {
    return this.key !== null && this.key !== 'true';
  };

  return Projects;

})());

var Project;

angular.component(Project = (function() {
  Project.id = 'project';

  Project.module = 'app';

  Project.template = 'app/components/main/content/project/project.html';

  Project.scope = true;

  Project.services = ['$state', 'data', '$sce'];

  function Project(options) {
    this.projectsService = options.services.data;
    this.key = options.services.$state.params.key;
    this.project = this.projectsService.getProjectByKey(this.key);
    if (this.project.hasVideo()) {
      this.project.interpolatedVideoUrl = options.services.$sce.trustAsResourceUrl(this.project.video);
    }
  }

  Project.prototype.onImageClick = function(image) {
    window.open(image);
    return true;
  };

  return Project;

})());
